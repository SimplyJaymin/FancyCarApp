apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
jacoco {
    toolVersion = "0.8.3"
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            def createCoverageTaskName = "create${sourceName.capitalize()}CoverageReport"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: ["$testTaskName", "$createCoverageTaskName"]) {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                //define which classes to exclude
                def fileFilter = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/*$ViewInjector*.*',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        'android/**/*.*',
                        '**/view/**',
                        '**/adapter/**',
                        '**/*Fragment*',
                        '**/*Activity*',
                        '**/*Contract*',
                        '**/*Adapter*',
                        '**/*Interface*',
                        '**/*View*',
                        '**/*Listener*',
                        '**/model/**'
                ]

//                def fileFilter = []

                def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/${sourcePath}", excludes: fileFilter) +
                        fileTree(dir: "${buildDir}/tmp/kotlin-classes/${sourceName}", excludes: fileFilter)

                def mainSrc = ["src/main/java"]

                additionalSourceDirs = files(mainSrc)
                sourceDirectories = files(mainSrc)
                classDirectories = files(debugTree)

                executionData = fileTree(dir: "$buildDir", includes: [
                        "jacoco/${testTaskName}.exec",
                        "outputs/code-coverage/connected/flavors/**/*coverage.ec"
                ])

                reports {
                    xml.enabled = true
                    html.enabled = true
                    html.destination file("${buildDir}/jacocoHtml")
                }
            }
        }
    }
}
